{"ast":null,"code":"var _jsxFileName = \"/Users/amitavbaruah/Documents/ethical-internal-website/src/components/Announcements.js\";\nimport React from \"react\";\nimport Post from \"./Post\";\nimport \"./DataTable.css\";\n\nconst localStorage = require(\"local-storage\");\n\nclass Announcements extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      postValues: []\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch(\"http://localhost:3001/announcements\", {\n      headers: {\n        authorization: localStorage.get(\"token\")\n      }\n    });\n\n    if (response.status === 401) {\n      let path = \"/login\";\n      this.props.history.push(path);\n    }\n\n    const json = await response.json();\n    this.setState({\n      postValues: json\n    });\n  }\n\n  render() {\n    return React.createElement(\"body\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"Announcements-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"ANNOUNCEMENTS \"), this.state.postValues.map(item => React.createElement(Post, Object.assign({\n      key: item.id\n    }, item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Announcements;","map":{"version":3,"sources":["/Users/amitavbaruah/Documents/ethical-internal-website/src/components/Announcements.js"],"names":["React","Post","localStorage","require","Announcements","Component","constructor","state","postValues","componentDidMount","response","fetch","headers","authorization","get","status","path","props","history","push","json","setState","render","map","item","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,iBAAP;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AAEA,MAAMC,aAAN,SAA4BJ,KAAK,CAACK,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAb;AACD;;AAED,QAAMC,iBAAN,GAA0B;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAD,EAAwC;AAClEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEX,YAAY,CAACY,GAAb,CAAiB,OAAjB;AAAjB;AADyD,KAAxC,CAA5B;;AAGA,QAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,UAAIC,IAAI,GAAG,QAAX;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwBH,IAAxB;AACD;;AACD,UAAMI,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAT,EAAnB;AACA,SAAKC,QAAL,CAAc;AAAEb,MAAAA,UAAU,EAAEY;AAAd,KAAd;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEG,KAAKf,KAAL,CAAWC,UAAX,CAAsBe,GAAtB,CAA0BC,IAAI,IAC7B,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAhB,OAAwBD,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CAFH,CADF,CADF;AAUD;;AA7ByC;;AAgC5C,eAAepB,aAAf","sourcesContent":["import React from \"react\";\nimport Post from \"./Post\";\nimport \"./DataTable.css\";\nconst localStorage = require(\"local-storage\");\n\nclass Announcements extends React.Component {\n  constructor() {\n    super();\n    this.state = { postValues: [] };\n  }\n\n  async componentDidMount() {\n    const response = await fetch(\"http://localhost:3001/announcements\", {\n      headers: { authorization: localStorage.get(\"token\") }\n    });\n    if (response.status === 401) {\n      let path = \"/login\";\n      this.props.history.push(path);\n    }\n    const json = await response.json();\n    this.setState({ postValues: json });\n  }\n\n  render() {\n    return (\n      <body>\n        <div className=\"header\">\n          <h1 className=\"Announcements-section\">ANNOUNCEMENTS </h1>\n          {this.state.postValues.map(item => (\n            <Post key={item.id} {...item} />\n          ))}\n        </div>\n      </body>\n    );\n  }\n}\n\nexport default Announcements;\n"]},"metadata":{},"sourceType":"module"}